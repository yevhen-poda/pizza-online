generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())

  fullName   String
  email      String   @unique
  password   String
  role       UserRole
  provider   String?
  providerId String?
  verified   DateTime

  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[]
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  variations ProductVariation[]

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariation {
  id Int @id @default(autoincrement())

  price     Float
  size      Int?
  pizzaType Int?

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  cartItems CartItem[]
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String @unique
  price    Float
  imageUrl String

  products  Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  totalAmount Float  @default(0)
  token       String

  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  quantity Int

  ingredients Ingredient[]

  productVariationId Int
  productVariation   ProductVariation @relation(fields: [productVariationId], references: [id])

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  fullName String
  email    String
  address  String
  phone    String
  comment  String?

  token       String
  totalAmount Float
  status      OrderStatus
  paymentId   String?
  items       Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

model VerificationCode {
  id Int @id @default(autoincrement())

  code String @unique

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, code])
}
